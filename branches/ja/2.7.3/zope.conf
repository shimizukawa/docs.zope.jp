 ###############################################################################
 # Zope 2 へようこそ
 ###############################################################################
 #
 # これはZopeの設定ファイルです。Zope設定ファイルはデフォルトの設定
 # ディレクティブと、他のディレクティブの使い方を示しています。
 # ディレクティブを宣言するには、'#'で始まらない行を追加してください。
 # 注意点として、コメントをディレクティブ行の途中から書き始めることは
 # 出来ません。行頭からのみ使用できます。
 
 # ZConfig は define で定義された文字列を後で使用します。
 
 %define INSTANCE <<INSTANCE_HOME>>
 %define ZOPE <<ZOPE_HOME>>
 
 # ディレクティブ: instancehome
 #
 # 概要:
 #     Zopeから使用するデータファイル・ローカルプロダクトファイル・
 #     インポートディレクトリ・Extensionディレクトリへのパス。
 #
 # 省略不可 (デフォルト値はありません)
 #
 # 例:
 #
 #    instancehome /home/chrism/projects/sessions
 
 instancehome $INSTANCE
 
 # ディレクティブ: clienthome
 #
 # 概要:
 #     ZopeのプロセスIDを格納するファイルを置くディレクトリ。
 #
 # デフォルト値: $INSTANCE/var
 #
 # 例:
 #
 #    clienthome /home/chrism/projects/sessions/var
 
 
 # ディレクティブ: path
 #
 # 概要:
 #     Pythonのモジュール検索パスの第一候補に設定されるディレクトリ名。
 #     このディレクティブは必要なだけ並べて定義することが出来ます。
 #     定義されたディレクトリは定義された順にモジュール検索パスの先頭に
 #     追加されます。このディレクティブが有効になるよりも前にモジュールパス
 #     の設定を利用する場合は注意が必要です。そのような場合には、環境変数
 #     PYTHONPATHに設定を追加する必要があります。
 #
 # デフォルト値: $INSTANCE/lib/python
 #
 # 例:
 #
 #    path $INSTANCE/mypymodules
 
 
 # ディレクティブ: products
 #
 # 概要:
 #     追加のプロダクトパッケージを格納するディレクトリ名を設定します。
 #     このディレクティブは必要なだけ並べて定義することが出来ます。
 #     各ディレクトリは定義された順にプロダクトパッケージの__path__に
 #     追加されます。全てのプロダクトはプロダクト名のアルファベット順に
 #     初期化されます。もし同じ名前のプロダクトが見つかった場合、この
 #     ディレクティブの定義順が先のディレクトリにあるパッケージがロード
 #     されます。最初にロードされるマスタープロダクトディレクトリが
 #     Zopeのソフトウェアホームにあり、これをプロダクトパスから除外する
 #     ことは出来ません。（そしてこのディレクティブで設定しないでください）
 #
 # デフォルト値: $INSTANCE/Products
 #
 # 例:
 #
 #    products /home/chrism/projects/myproducts
 
 
 # ディレクティブ: environment
 #
 # 概要:
 #     Zopeが起動している間利用できる環境変数として、Keyとvalueのペアを定義
 #     することが出来ます。ただし、これはPYTHONPATHのようなシステムに関連する
 #     環境変数の代わりにはなりません。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    <environment>
 #      MY_PRODUCT_ENVVAR foobar
 #    </environment>
 
 # ディレクティブ: debug-mode
 #
 # 概要:
 #     Zopeを開発する上で有用な情報を表示するモードのon/offを切り替えます。
 #     デバッグモードがonの場合以下の効果があります:
 #
 #     - プロセスがコントロールターミナルからdetachされません
 #
 #     - プロダクトの初期化中にエラーが発生した場合、起動は失敗します
 #       (イベントログファイルにエラーメッセージを書き込む代わりに)。
 #
 #     - ファイルシステムベースのスクリプト・スキン・PageTemplateファイル・
 #       DTMLファイルなどがサーバーのファイルシステム上で編集された場合、
 #       Zopeがそれを認識して、自動的に再読込します。デバッグモードがoff
 #       の場合は、サーバーのファイル更新を反映するために、再起動する必要
 #       があります。
 #
 #     Zopeをリリース環境で利用する場合、この設定をoffにすることでZopeが
 #     (場合によってはかなり)高速に動作します。
 #
 # デフォルト値: on
 #
 # 例:
 #
 #    debug-mode on
 
 
 # ディレクティブ: effective-user
 #
 # 概要:
 #     もしZopeを "root" ユーザーで起動するつもりなら、このディレクティブに
 #     Zopeが 'suid' するべきユーザー名かユーザーIDを設定しなくてはいけません。
 #     Zopeはサーバーのポートが割り当てられた後で 'suid' します。
 #     このディレクティブはUNIX上でrootユーザーとしてZopeを起動した場合にのみ
 #     機能します。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    effective-user chrism
 
 
 # ディレクティブ: enable-product-installation
 #
 # 概要:
 #     もしこのディレクティブがonならば、Zopeは起動時に
 #     'プロダクトのインストール'(各プロダクトディレクトリにあるPython
 #     モジュールの登録)を行います。offにしたばあい、Zope/ZEOの起動を高速化
 #     することができますが、それはコントロールパネルのプロダクト一覧がプロ
 #     ダクトディレクトリの内容と同期しなくなることになります。
 #     注意: Zopeは最低一回はこのディレクティブがonの状態で起動されなくては
 #     いけません。そうしないと起動時にエラーが発生します。もしZEOを使う場合、
 #     最低一つのZEOクライアントが一回はこのディレクティブをonの状態で起動し
 #     ないといけません。他のZEOクライアントはoffでもかまいません。
 #     注意:もしメインストレージがread-onlyでマウントされているなら、この
 #     ディレクティブをoffにしなければいけません。
 # 
 # デフォルト値: on
 #
 # 例:
 #
 #    enable-product-installation off
 
 # ディレクティブ: locale
 #
 # 概要:
 #     locale名を設定してlocale(国際化)サポートを有効にします。OSのlocaleに
 #     関するドキュメントを参照して、あなたのシステムで使用できるlocaleを確認
 #     してください。もし、使用しているPythonモジュールがlocaleモジュールを
 #     サポートしていない、あるいはここで設定したlocale名がシステムでサポート
 #     していない場合、Zopeの起動時にエラーが発生し、起動に失敗します。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    locale ja
 #    locale ja_JP.UTF-8
 
 
 # ディレクティブs: port-base
 #
 # 概要:
 #     ZServerが使用するport番号定義のオフセット値を設定します。例えば、
 #     http-serverポートを8080に設定して、port-baseを1000に設定した場合、
 #     HTTPサーバーは9080ポートを待ち受けに使用します。この設定を使用して
 #     Zopeサーバープロセスが使用する複数のポート番号を一度に簡単に変更する
 #     事が出来ます。
 #
 # デフォルト値:
 #
 #     0
 #
 # 例:
 #
 #     port-base 1000
 
 # ディレクティブ: datetime-format
 #
 # 概要:
 #     "us"か"international"を設定することで、DateTimeモジュールがパースする
 #     日付文字列を以下のように強制します。
 #     "us": 月-日-年
 #     "international": 日-月-年
 #     デフォルトでは"us"方式が使用されます。
 #
 # デフォルト値: us
 #
 # 例:
 #
 #    datetime-format international
 
 
 # ディレクティブ: zserver-threads
 #
 # 概要:
 #     ZopeのZServerがリクエストを待ち受けるスレッド数を設定します。
 #     デフォルト値は4です。
 #
 # デフォルト値: 4
 #
 # 例:
 #
 #    zserver-threads 10
 
 
 # ディレクティブ: python-check-interval
 #
 # 概要:
 #     Pythonインタプリタのチェック間隔を整数値で設定します。この間隔は
 #     インタプリタがスレッド切り替えとシグナルハンドラをチェックするする
 #     周期です。Zopeのデフォルトは500ですが、パフォーマンスを上げるために
 #     この間隔を増やす事も出来ます。
 #
 # デフォルト値: 500
 #
 # 例:
 #
 #    python-check-interval 1000
 
 
 # ディレクティブ: zserver-read-only-mode
 #
 # 概要:
 #     このディレクティブをonにして、Zopeがlogファイルやpidファイルを作成する
 #     事を禁止します。アクセスログやイベントログは標準出力に表示されます。
 #     このディレクティブがonの場合、pcgi, fastcgi, そしてデーモン関連の
 #     ディレクティブは無効になります。
 #
 # デフォルト値: off
 #
 # 例:
 #
 #    zserver-read-only-mode on
 
 
 # ディレクティブ: pid-filename
 #
 # 概要:
 #     ZopeのプロセスIDを書き込むファイルへのパスです。デフォルトは
 #     CLIENT_HOME/Z2.pid です。
 #
 # デフォルト値: CLIENT_HOME/Z2.pid
 #
 # 例:
 #
 #    pid-filename /home/chrism/projects/sessions/var/Z2.pid
 
 
 # ディレクティブ: lock-filename
 #
 # 概要:
 #     Zopeが起動中であることを示す"lock file"へのパスです。このファイルは
 #     Zopeの起動中はzopectl.pyからロックされます。デフォルトは
 #     CLIENT_HOME/Z2.lock です。
 #
 # デフォルト値: CLIENT_HOME/Z2.lock
 #
 # 例:
 #
 #    lock-filename /home/chrism/projects/sessions/var/Z2.lock
 
 
 # ディレクティブ: mime-types
 #
 # 概要:
 #     Zopeにmime.types情報を追加定義します。フォーマットはファイルはApache
 #     で提供されるmime.typesファイルと同じです。"mime-types"ディレクティブ
 #     は必要なだけ複数回記述することが出来ます。
 #
 # 例:
 #
 #     mime-types  $INSTANCE/etc/mime.types
 
 
 # ディレクティブ: structured-text-header-level
 #
 # 概要:
 #     構造化テキスト(structured text)ドキュメントのHTMLヘッダレベルの開始値
 #     を設定します。デフォルトは3で、一番最初のヘッダは<H3>になります。
 #
 # デフォルト値: 3
 #
 # 例:
 #
 #    structured-text-header-level 1
 
 # ディレクティブ: rest-input-encoding
 #
 # 概要:
 #    re-StructuredTextドキュメントの入力エンコーディングを設定します。
 #    例えば、'utf-8', 'iso-8859-15' あるいはPythonが使用できる値を設定します。
 #    デフォルトは使用しているPythonのデフォルトエンコーディングです。
 #
 # デフォルト値: unset (uses system default)
 #
 # 例:
 #
 #    rest-input-encoding utf-8
 
 # ディレクティブ: rest-output-encoding
 #
 # 概要:
 #    re-StructuredTextドキュメントの出力エンコーディングを設定します。
 #    例えば、'utf-8', 'iso-8859-15' あるいはPythonが使用できる値を設定します。
 #    デフォルトは使用しているPythonのデフォルトエンコーディングです。
 #
 # デフォルト値: unset (uses system default)
 #
 # 例:
 #
 #    rest-output-encoding utf-8
 
 # ディレクティブ: rest-header-level
 #
 # 概要:
 #     reStructuredTextドキュメントのHTMLヘッダレベルの開始値を設定します。
 #     デフォルトは3で、一番最初のヘッダは<H3>になります。
 #
 # デフォルト値: 3
 #
 # 例:
 #
 #    rest-header-level 2
 
 # ディレクティブ: rest-language-code 
 #
 # 概要:
 #    docutilパッケージ内部の色々な変換や、DTDエレメントのマッピングに使用
 #    される言語コードを設定します。サポートされている言語コードについて、
 #    詳しくは lib/python/docutils/languages/ を参照してください。
 #
 # デフォルト値: en
 #
 # 例:
 #
 #    rest-language-code de
 
 # ディレクティブ: cgi-environment
 #
 # 概要:
 #     CGI用の環境変数として、Keyとvalueのペアを定義することが出来ます。
 #     これは、Zserverが他のWebサーバーからProxyリクエストを受け付けたい場合
 #     に、ZserverのCGI環境変数を他のWebサーバーに反映したい場合に使用します。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 # <cgi-environment>
 #   HTTPS_SERVER Foobar Server 1.0
 #   HTTPS_PORT 443
 # </cgi-environment>
 
 
 
 # ディレクティブ: dns-server
 #
 # 概要:
 #     ZopeのアクセスログにIPアドレスではなくホスト名を記録したい場合に、
 #     DNSサーバーのアドレスを設定します。デフォルトはZopeはIPアドレスを
 #     ホスト名には変換しません。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    dns-server 127.0.0.1
 
 
 # ディレクティブ: ip-address
 #
 # 概要:
 #     Zopeがリクエストを受け付けるデフォルトIPアドレスを設定します。これは
 #     Zopeが提供する全てのサーバープロトコルで共通です。この値が設定されない
 #     場合、ZopeはOSがサポートしているIPアドレス全てでリクエストを受け付け
 #     ます。This directive can be overridden on a per-server basis in the
 #     servers section.
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    ip-address 127.0.0.1
 
 
 # ディレクティブ: http-realm
 #
 # 概要:
 #     このZopeインスタンスがHTTPの"Realm"ヘッダとして出力する値を設定します。
 #     この値はBASIC認証ダイアログで表示されます。
 #
 # デフォルト値: Zope
 #
 # 例:
 #
 #    http-realm Slipknot
 
 
 # ディレクティブ: automatically-quote-dtml-request-data
 #
 # 概要:
 #     <dtml-var>などでREQUESTデータから取得した文字列に含まれる'<'文字の
 #     自動クォート機能を無効にする場合、このディレクティブをoffにしてください。
 #     このディレクティブがonの場合、<dtml-var>や&dtml-でREQUESTからデータ
 #     を取得する場合に、データに含まれる'<'がHTMLクォートされます
 #    （REQUEST.somevarname などの直接アクセスは対象外です）。これはDTML
 #     プログラマを"client-side trojan"攻撃から出来るだけ保護します。
 #
 # デフォルト値: on
 #
 # 例:
 #
 #    automatically-quote-dtml-request-data on
 
 # ディレクティブ: trusted-proxy
 #
 # 概要:
 #     一つあるいは複数の信頼できるProxyをホスト名かIPアドレスで設定します。
 #     これらの定義によって信頼されたフロントエンドのProxyからのアクセスは
 #     ZopeのX-Forwarded-Forヘッダで提供されます。信頼されるProxyから接続
 #     があった場合、ZopeはX-Forwardedヘッダを信頼し、接続元ユーザーのIP
 #     アドレスをアドレスによる認証に使用することが出来ます。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    trusted-proxy www.example.com
 #    trusted-proxy 192.168.1.1
 
 # ディレクティブ: publisher-profile-file
 #
 # 概要:
 #    ファイルシステム上のファイル名を(複数可)定義することで、Zopeが使用
 #    しているPythonのプロファイリング機能が有効になります。詳しくは、ZMI
 #    のControl_PanelからDebug InformationのProfilingタブを参照してくださ
 #    い。
 #    重要: この設定はZopeの実行速度を著しく低下させます。リリース時には
 #    無効にする事を勧めます。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    publisher-profile-file $INSTANCE/var/profile.dat
 
 
 # ディレクティブ: security-policy-implementation
 #
 # 概要:
 #     Zopeの標準セキュリティー機構はC言語で実装されています。このディレク
 #     ティブを"python"に設定すると、Pythonで実装されたセキュリティー機構
 #     を使用します。処理速度が低下する影響が出ますが、デバッグ時に有用な
 #     VerboseSecurityなどの"monky-patch"を利用するプロダクトを使用する場合
 #     必要な設定です。
 #
 # デフォルト値: C
 #
 # 例:
 #
 #    security-policy-implementation python
 
 # ディレクティブ: skip-authentication-checking
 #
 # 概要:
 #     このディレクティブをonにすると、Zopeは認証関連の確認を行わなくなり、
 #     サーバーは無認証でアクセスできるコンテンツのみを提供します。
 #     この機能はsecurity-policy-implementationが'C'に設定されている場合のみ
 #     機能します。
 #
 # デフォルト値: off
 #
 # 例:
 #
 #    skip-authentication-checking on
 
 
 # ディレクティブ: skip-ownership-checking
 #
 # 概要:
 #     このディレクティブをonにすると、ブラウザからのコード実行時に行われる
 #     Zopeの所有権限確認処理を無効にします。デフォルトでは、onに設定し、
 #     低い権限のユーザーが権限の高いユーザーに危険な処理を実行させることが
 #     出来る、といった'trojan horse'などのセキュリティーの問題が起こらない
 #     ようにします。
 #
 # デフォルト値: off
 #
 # 例:
 #
 #    skip-ownership-checking on
 
 
 # ディレクティブ: maximum-number-of-session-objects
 #
 # 概要:
 #     一時オブジェクトを格納する'/temp_folder/session_data'の最大格納数を
 #     整数値で設定します。
 #
 # デフォルト値: 1000
 #
 # 例:
 #
 #    maximum-number-of-session-objects 10000
 
 
 # ディレクティブ: session-add-notify-script-path
 #
 # 概要:
 #     起動時に/temp_folderに作成されたsession_dataの一時オブジェクト格納
 #     コンテナへのオブジェクト追加時に呼び出される、呼び出し可能な
 #     オブジェクトへのZope上のパス名を設定する。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    session-add-notify-script-path /scripts/add_notifier
 
 
 # ディレクティブ: session-delete-notify-script-path
 #
 # 概要:
 #     起動時に/temp_folderに作成されたsession_dataの一時オブジェクト格納
 #     コンテナのオブジェクト削除時に呼び出される、呼び出し可能な
 #     オブジェクトへのZope上のパス名を設定する。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    session-delete-notify-script-path /scripts/del_notifier
 
 
 # ディレクティブ: session-timeout-minutes
 #
 # 概要:
 #     '/temp_folder/session_data'一時オブジェクトコンテナのデータオブジェ
 #     クトが無効になるまでの時間(分)を整数値で指定する。
 #
 # デフォルト値: 20
 #
 # 例:
 #
 #    session-timeout-minutes 30
 
 
 # ディレクティブ: session-resolution-seconds
 #
 # 概要:
 #     '/temp_folder/session_data'一時オブジェクトコンテナの時間計測間隔(秒)
 #     を整数値で指定する。
 #
 # デフォルト値: 20
 #
 # 例:
 #
 #    session-resolution-seconds 60
 
 
 # ディレクティブ: suppress-all-access-rules
 #
 # 概要:
 #     このディレクティブをonに設定すると、Zope上の'access rule'が無効に
 #     なります。もし、access ruleの設定に失敗して自分自身がアクセスでき
 #     なくなってしまった場合に使用します。
 #
 # デフォルト値: off
 #
 # 例:
 #
 #    suppress-all-access-rules on
 
 
 # ディレクティブ: suppress-all-site-roots
 #
 # 概要:
 #     このディレクティブをonに設定すると、Zope上の'site root'が無効に
 #     なります。もし、access ruleの設定に失敗して自分自身がアクセスでき
 #     なくなってしまった場合に使用します。
 #
 # デフォルト値: off
 #
 # 例:
 #
 #    suppress-all-site-roots on
 
 
 # ディレクティブ: database-quota-size
 #
 # 概要:
 #     このディレクティブを設定して、ZopeのFileStorageデータベースの最大容量
 #     を制限します。値は整数でByte値を設定します。上限に達した場合、データ
 #     ベースへの追加を行うことは出来なくなります。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    database-quota-size 1000000
 
 
 # ディレクティブ: read-only-database
 #
 # 概要:
 #     このディレクティブはZopeのFileStorage型ZODBを読み込み専用で開きます。
 #
 # デフォルト値: off
 #
 # 例:
 #
 #    read-only-database on
 
 
 # ディレクティブ: zeo-client-name
 #
 # 概要:
 #     もし、ZEOクライアントのキャッシュをクライアント再起動時に保持したい
 #     のであれば、zeo-client-nameを定義する必要があります。このディレクティブ
 #     を設定せずにZEOを使用した場合、クライアントがシャットダウンされる際
 #     に一時ファイルに保存されたクライアントのキャッシュは削除されます。
 #     zeo-client-nameディレクティブの値は重複しない名前としてローカル
 #     キャッシュファイル作成に使用されます。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    zeo-client-name zeo1
 
 
 # ディレクティブs: logger
 #
 # 概要:
 #     このエリアには一つ以上の"logger"セクションを置き、各セクション名は
 #     "access", "event", "trace" となります。"access"はZopeへのアクセスログ
 #     を記録します。"event"はZopeのイベント情報を記録します。"trace"は
 #     REQUESTの詳細を記録します(デバッグ時のみの利用を推奨)。各logger
 #     セクションには"level"とその値を持ち、このレベルはログ保存時の詳細度
 #     を表します。デフォルトではlevelはINFOに設定されます。levelには、
 #     "CRITICAL", 'ERROR", WARN", "INFO", "DEBUG", "ALL" を指定できます。
 #     各loggerセクションには一つ以上の"handler"セクションを追加することが
 #     でき、このセクションでログ取得時に利用されるログハンドラの種別を
 #     定義します。ログハンドラは5種類有り、logfile, syslog, win32-eventlog
 #     http-handler, email-notifierがあります。各ハンドラはハンドラの動作を
 #     決定する定義を記述することが出来ます。全てのハンドラセクションには
 #     "format"(ログメッセージ書式)・"dateformat"(ログメッセージ日付書式)・
 #     "level"を定義することができ、"level"は上位のセクションで定義した
 #     "level"をそのハンドラ固有の値に上書きします。
 #     [XXXX ここにもうすこし詳細に書くこと]
 #
 # デフォルト値:
 #
 #     アクセスログは<instancehome>/log/Z2.logファイルにINFOレベルで記録され
 #     ます。イベントログは<instancehome>/log/event.logファイルにINFOレベル
 #     で記録されます。traceログは記録されません。
 
 <eventlog>
   level all
   <logfile>
     path $INSTANCE/log/event.log
     level info
   </logfile>
 </eventlog>
 
 <logger access>
   level WARN
   <logfile>
     path $INSTANCE/log/Z2.log
     format %(message)s
   </logfile>
 </logger>
 
 # <logger trace>
 #   level WARN
 #   <logfile>
 #     path $INSTANCE/log/trace.log
 #     format %(message)s
 #   </logfile>
 # </logger>
 
 # ディレクティブ: warnfilter
 #
 # 概要:
 #     このセクションには警告フィルタを定義することが出来ます。以下のキー
 #     をこのセクションに定義することが出来ます:
 #
 #      action:  このキーに続けて以下の文字列を指定出来ます:
 #
 #           "error"   一致する警告発生時に例外を起こします
 #           "ignore"  一致する警告を一切表示しません
 #           "always"  一致する警告を常に表示します
 #           "default" 警告が発生した場合、それぞれの発生場所について最初の
 #                     一回だけ表示します
 #           "module"  警告が発生した場合、それぞれのモジュールについて最初
 #                     の一回だけ表示します。
 #           "once"    一致する警告発生時に、発生箇所にかかわらず最初の一回
 #                     のみ表示します。
 #
 #      message:  正規表現文字列で一致させたい警告メッセージを指定します。
 #                (正規表現文字列は大文字小文字を区別しません)
 #
 #      category: Pythonのドット区切り表現でクラス名を指定します。クラス名は
 #                Warningクラスのサブクラスである必要があります。このクラスと
 #                一致する警告が対象となります。
 #
 #      message:  正規表現文字列で一致させたいモジュール名を指定します。
 #                (正規表現文字列は大文字小文字を区別しません)
 #
 #      lineno:   対象となる警告が発生する行番号を整数値で設定します。
 #                0を指定すると全ての行が対象となります。
 #
 #     全てのキーはこのセクション内で必須項目ではありません。また、一つ以上
 #     複数のwarnfilterセクションを定義することが出来ます。
 #
 # デフォルト値: unset
 #
 # 例:
 #
 #    <warnfilter>
 #       action ignore
 #       category exceptions.DeprecationWarning
 #    </warnfilter>
 
 
 # ディレクティブ: max-listen-sockets
 #
 # 概要:
 #     ZServerが接続待ちに使用するソケットの最大数を設定します。
 #
 # デフォルト値: 1000
 #
 # 例:
 #
 #    max-listen-sockets 500
 
 
 # ディレクティブ: servers
 #
 # 概要:
 #     ここで説明する一連のセクションはZopeが提供するいくつかのZServerに
 #     ついて定義します。以下の7つの異なるサーバータイプを定義することが出
 #     来ます: http-server, ftp-server, webdav-source-server, persistent-cgi,
 #     fast-cgi, monitor-server, and icp-server. もし、どのサーバーも定義
 #     されなかった場合、デフォルトのサーバー定義が使用されます。
 #
 #     使用されるポートの定義は、最も簡単な記述はポート番号を 80 等と記述し、
 #     複雑な記述としてはホスト名込みで127.0.0.1:80 等と記述します。ホスト名
 #     が省略された場合は、デフォルトのIPアドレスがホスト名に使用されます。
 #
 #     ポート番号にはport-baseで定義したオフセット値が加算されます。
 #     port-baseのデフォルト値は8000です。
 #
 # 訳注:
 #     port-baseのデフォルト値は0です。
 #
 # デフォルト値:
 #
 #     HTTPサーバーが8080で、FTPサーバーが8021で起動されます。
 
 <http-server>
   # 有効なキーは"address"と"force-connection-close"です
   address 8080
   # force-connection-close on
 </http-server>
 
 <ftp-server>
   # 有効なキーは"address"です
   address 8021
 </ftp-server>
 
 # 例:
 #
 #  <webdav-source-server>
 #    # 有効なキーは"address"と"force-connection-close"
 #    address 1980
 #    force-connection-close off
 #  </webdav-source-server>
 #
 #  <persistent-cgi>
 #    # 有効なキーは"path"です
 #    path somefile
 #  </persistent-cgi>
 #
 #  <fast-cgi>
 #    # 有効なキーは"address"で、hostname:port形式・portのみ・Unix-domain
 #    # ソケットへのパスのどれかを記述します。
 #    address somefile
 #  </fast-cgi>
 #
 #  <monitor-server>
 #    # 有効なキーは"address"です
 #    address 99
 #  </monitor-server>
 #
 #  <icp-server>
 #    # 有効なキーは"address"です
 #    address 888
 #  </icp-server>
 
 
 # データベース (zodb_db) セクション
 #
 # 概要:
 #     データベースセクションにはカスタムデータベースとストレージ種別を定義
 #     することが出来ます。一つ以上のzodb_dbセクションを定義してください。
 #
 # デフォルト値: unset.
 #          重要: Zopeが起動するために、少なくとも一つ以上のデータベースを、
 #          "/"をmount-pointとして定義して下さい。
 
 <zodb_db main>
     # メイン FileStorage データベース
     <filestorage>
       path $INSTANCE/var/Data.fs
     </filestorage>
     mount-point /
 </zodb_db>
 
 <zodb_db temporary>
     # テンポラリストレージデータベース (セッション用)
     <temporarystorage>
       name temporary storage for sessioning
     </temporarystorage>
     mount-point /temp_folder
     container-class Products.TemporaryFolder.TemporaryContainer
 </zodb_db>
 
 # その他のストレージ例
 #
 # ZEOクライアントストレージ:
 #
 # <zodb_db main>
 #   mount-point /
 #   <zeoclient>
 #     server localhost:8100
 #     storage 1
 #     name zeostorage
 #     var $INSTANCE/var
 #   </zeoclient>
 # </zodb_db>
 
